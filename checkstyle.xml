<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE module PUBLIC
        "-//Puppy Crawl//DTD Check Configuration 1.1//EN"
        "http://www.puppycrawl.com/dtds/configuration_1_1.dtd">

<!--
  @see http://checkstyle.sourceforge.net/availablechecks.html
    
  Checkstyle configuration that checks the sun coding conventions from:

    - the Java Language Specification at
      http://java.sun.com/docs/books/jls/second_edition/html/index.html

    - the Sun Code Conventions at http://java.sun.com/docs/codeconv/

    - the Javadoc guidelines at
      http://java.sun.com/j2se/javadoc/writingdoccomments/index.html

    - the JDK Api documentation http://java.sun.com/j2se/docs/api/index.html

    - some best practices

  Checkstyle is very configurable. Be sure to read the documentation at
  http://checkstyle.sf.net (or in your downloaded distribution).

  Most Checks are configurable, be sure to consult the documentation.

  To completely disable a check, just comment it out or delete it from the file.

  Finally, it is worth reading the documentation.

-->

<module name="Checker">

    <module name="FileLength">
        <property name="max" value="1000"/>
        <!-- Ver o que o Robert C. Martin (Uncle Bob) diz... -->
    </module>

    <!-- Checks for Headers                                -->
    <!-- See http://checkstyle.sf.net/config_header.html   -->
    <!--module name="Header"-->  <!-- Ver também: RegexpHeader --> <!--
        <property name="header" value="// Copyright (C) 2004 FNDE\n// All rights reserved"/>
        <property name="fileExtensions" value="java"/>
        Ex.:
        /***
         * [Descrição do arquivo].
         * 
         * [mais informações precisa ter 1 [ENTER] para definir novo parágrafo]
         * 
         * [pode usar quantas linhas forem necessárias]
         * [linhas logo abaixo como esta, são consideradas mesmo parágrafo]
         *
         * @category  [Categoria a que o arquivo pertence]
         * @name      [Apelido para o arquivo]
         * @author    [nome do autor] <[e-mail do autor]>
         * @copyright [Informações de Direitos de Cópia]
         * @license   [link da licença] [Nome da licença]
         * @link      [link de onde pode ser encontrado esse arquivo]
         * @version   [Versão atual do arquivo]
         * @since     [Arquivo existe desde: Data ou Versão]
         */
    </module-->

    <!-- Checks that a package.html file exists for each package.     -->
    <!-- See http://checkstyle.sf.net/config_javadoc.html#PackageHtml -->
    <!--module name="PackageHtml"/-->

    <!-- Checks whether files end with a new line.                        -->
    <!-- See http://checkstyle.sf.net/config_misc.html#NewlineAtEndOfFile -->
    <!--module name="NewlineAtEndOfFile"/-->

    <!-- Checks that property files contain the same keys.         -->
    <!-- See http://checkstyle.sf.net/config_misc.html#Translation -->
    <module name="Translation"/>

    <module name="FileTabCharacter">
        <property name="eachLine" value="true"/>
    </module>

    <module name="SuppressWarningsFilter" />

    <!-- Default value="12" - Parecido com CPD, mas lá a comparação é por token,
    por isso é muito melhor por lá -->
    <!--module name="StrictDuplicateCode">
        <property name="min" value="20"/>
    </module-->


    <module name="TreeWalker">

        <!--property name="cacheFile" value="target/cachefile"/-->
        <property name="tabWidth" value="4"/>

	<module name="FileContentsHolder"/>

	<module name="SuppressWarningsHolder" />

        <module name="AbstractClassName">
            <property name="severity" value="ignore"/>
        </module>

        <module name="BooleanExpressionComplexity">
            <property name="max" value="3"/>
            <!-- Disallow the bitwise operators "|" and "&". Permiting only "||", "&&" and "^" -->
            <property name="tokens" value="BXOR,LAND,LOR"/>
        </module>

        <module name="ClassDataAbstractionCoupling">
            <property name="max" value="7"/>
        </module>
        <module name="ClassFanOutComplexity">
            <property name="max" value="20"/>
        </module>

        <module name="CyclomaticComplexity">
            <property name="max" value="7"/>
            <!-- Ver o que o Robert C. Martin (Uncle Bob) diz... -->
        </module>
        <module name="JavaNCSS"/>
        <module name="NPathComplexity">
            <property name="max" value="20"/>
        </module>
        <module name="NestedForDepth">
            <property name="max" value="3"/>
            <!-- (X, Y, Z) -->
        </module>
        <module name="NestedIfDepth">
            <property name="max" value="3"/>
            <!-- Ver o que o Robert C. Martin (Uncle Bob) diz... -->
        </module>
        <module name="NestedTryDepth"/>
        <!-- Design -->

        <!-- Checks for Javadoc comments.                     -->
        <!-- See http://checkstyle.sf.net/config_javadoc.html -->
        <!--
        <module name="JavadocType">
            <property name="allowMissingParamTags" value="true"/>
        </module>
        <module name="JavadocMethod">
            <property name="scope" value="public"/>
            <property name="allowUndeclaredRTE" value="true"/>
            <property name="allowMissingParamTags" value="true"/>
        </module>
        <module name="JavadocType">
            <property name="scope" value="anoninner"/>
            <property name="severity" value="ignore"/>
        </module>
        -->
        <!--
        <module name="JavadocVariable"/>
        <module name="JavadocStyle"/>
        -->


        <!-- Checks for Naming Conventions.                  -->
        <!-- See http://checkstyle.sf.net/config_naming.html -->
        <module name="ConstantName"/>
        <module name="LocalFinalVariableName"/>
        <module name="LocalVariableName"/>
        <module name="MemberName"/>
        <module name="MethodName"/>
        <module name="PackageName"/>
        <module name="ParameterName"/>
        <module name="StaticVariableName"/>
        <module name="TypeName"/>


        <!-- Checks for imports                              -->
        <!-- See http://checkstyle.sf.net/config_import.html -->
        <!-- these have been commented out due to the fact that pmd covers these in the XRadar. -->
        <module name="AvoidStarImport"/>
        <module name="IllegalImport"/> <!-- defaults to sun.* packages -->
        <module name="RedundantImport"/>
        <module name="UnusedImports"/>


        <!-- Checks for Size Violations.                    -->
        <!-- See http://checkstyle.sf.net/config_sizes.html -->
        <module name="LineLength">
            <!-- Robert C. Martin (Uncle Bob) diz 150 -->
            <property name="max" value="120"/>
        </module>
        <module name="MethodLength">
            <!-- Robert C. Martin (Uncle Bob) diz 20 -->
            <property name="max" value="20"/>
            <property name="countEmpty" value="false"/>
        </module>
        <module name="ParameterNumber">
            <property name="max" value="10"/>
            <!-- Default value="7" - Ver o que o Robert C. Martin (Uncle Bob) diz... -->
        </module>
        <module name="AnonInnerLength">
            <property name="max" value="20"/>
        </module>


        <!-- Checks for whitespace                               -->
        <!-- See http://checkstyle.sf.net/config_whitespace.html -->
        <module name="EmptyForIteratorPad"/>
        <module name="EmptyForInitializerPad"/>
        <module name="NoWhitespaceAfter"/>
        <module name="NoWhitespaceBefore"/>
        <module name="OperatorWrap">
            <property name="tokens"
                      value="BAND,BOR,BSR,BXOR,COLON,DIV,EQUAL,GE,GT,LAND,LE,LITERAL_INSTANCEOF,LOR,LT,MINUS,MOD,NOT_EQUAL,PLUS,SL,SR,STAR"/>
        </module>
        <module name="ParenPad">
            <property name="tokens" value="CTOR_CALL,METHOD_CALL,SUPER_CTOR_CALL"/>
        </module>
        <module name="TypecastParenPad">
            <property name="tokens" value="RPAREN,TYPECAST"/>
        </module>
        <module name="WhitespaceAfter">
            <property name="tokens" value="COMMA, SEMI"/>
        </module>
        <module name="WhitespaceAround">
            <property name="tokens" value="ASSIGN, BAND, BAND_ASSIGN, BOR, BOR_ASSIGN, BSR, BSR_ASSIGN, BXOR, BXOR_ASSIGN, COLON, DIV, DIV_ASSIGN, EQUAL, GE, GT, LAND, LE, LITERAL_ASSERT, LITERAL_CATCH, LITERAL_DO, LITERAL_ELSE, LITERAL_FINALLY, LITERAL_FOR, LITERAL_IF, LITERAL_RETURN, LITERAL_SYNCHRONIZED, LITERAL_TRY, LITERAL_WHILE, LOR, LT, MINUS, MINUS_ASSIGN, MOD, MOD_ASSIGN, NOT_EQUAL, PLUS, PLUS_ASSIGN, QUESTION, SL, SLIST, SL_ASSIGN, SR, SR_ASSIGN, STAR, STAR_ASSIGN, LITERAL_ASSERT, TYPE_EXTENSION_AND, WILDCARD_TYPE"/>
        </module>
        <module name="GenericWhitespace"/>


        <!-- Modifier Checks                                    -->
        <!-- See http://checkstyle.sf.net/config_modifiers.html -->
        <module name="ModifierOrder"/>
        <!--  Java Language specification -->
        <!--module name="RedundantModifier"/-->


        <!-- Checks for blocks. You know, those {}'s         -->
        <!-- See http://checkstyle.sf.net/config_blocks.html -->
        <module name="AvoidNestedBlocks">
            <property name="allowInSwitchCase" value="true"/>
        </module>
        <module name="FallThrough"/>
        <module name="EmptyBlock"/>
        <module name="LeftCurly">
            <property name="maxLineLength" value="122"/>
        </module>
        <module name="NeedBraces"/>
        <module name="RightCurly"/>


        <!-- Checks for common coding problems               -->
        <!-- See http://checkstyle.sf.net/config_coding.html -->
        <!--module name="AvoidInlineConditionals"/--> <!-- Ver o que o Robert C. Martin (Uncle Bob) diz... -->
        <module name="CovariantEquals"/>
        <!--module name="DoubleCheckedLocking"/--> <!-- Não existe mais: http://www.cs.umd.edu/~pugh/java/memoryModel/DoubleCheckedLocking.html -->
        <module name="EmptyStatement"/>
        <module name="EqualsHashCode"/>
        <module name="ExplicitInitialization"/>
        <module name="HiddenField">
            <property name="ignoreConstructorParameter" value="true"/>
            <property name="ignoreSetter" value="true"/>
        </module>
        <!--module name="IllegalCatch"/-->
        <module name="IllegalInstantiation"/>
        <module name="IllegalThrows"/>
        <module name="InnerAssignment"/>
        <!-- module name="JUnitTestCase"/-->
        <module name="MagicNumber">
            <property name="ignoreAnnotation" value="true"/>
            <property name="ignoreHashCodeMethod" value="true"/>
        </module>
        <module name="MissingSwitchDefault"/>
        <module name="ModifiedControlVariable"/>
        <module name="MultipleStringLiterals">
            <!-- default value = ANNOTATION (ignore strings inside the context of an annotation)  -->
            <property name="ignoreOccurrenceContext" value="ANNOTATION, ANNOTATION_ARRAY_INIT, ANNOTATION_MEMBER_VALUE_PAIR"/>
        </module>
        <module name="MultipleVariableDeclarations"/>
        <!-- SUN Code conventions -->
        <!-- module name="RedundantThrows"/-->
        <module name="SimplifyBooleanExpression"/>
        <module name="SimplifyBooleanReturn"/>
        <module name="StringLiteralEquality"/>

        <!-- Checks for class design                         -->
        <!-- See http://checkstyle.sf.net/config_design.html -->
        <module name="DesignForExtension">
            <property name="severity" value="ignore"/>
        </module>
        <module name="FinalClass"/>
        <!--module name="FinalLocalVariable"/--> <!-- Muito onerosa -->
        <!--module name="FinalLocalVariable">
           <property name="tokens" value="VARIABLE_DEF,PARAMETER_DEF,CTOR_DEF"/>
        </module-->
        <!--module name="FinalParameters"/--> <!-- ParameterAssignment torna esta regra obsoleta -->
        <module name="ParameterAssignment"/>
        <module name="HideUtilityClassConstructor"/>
        <module name="InterfaceIsType"/>
        <!-- Bloch, Effective Java, Item 17 - Use Interfaces only to define types. -->
        <module name="MutableException"/>
        <module name="VisibilityModifier">
            <property name="packageAllowed" value="true"/>
            <!-- QUEBRA EMCAPSULAMENTO, REMOVER OU MUDAR PARA FALSE -->
            <property name="protectedAllowed" value="true"/>
        </module>
        <module name="ReturnCount">
            <property name="max" value="2"/>
            <property name="format" value="^$"/><!-- Todos os métodos -->
            <!-- Default value="2" e ignora metodo equals() -->
        </module>
        <module name="ThrowsCount">
            <property name="max" value="3"/>
            <!-- Default value="1" - REDUZIR PARA 2 (DOIS) O MAIS BREVE POSSÍVEL!!! -->
        </module>


        <!-- Miscellaneous other checks.                   -->
        <!-- See http://checkstyle.sf.net/config_misc.html -->
        <module name="ArrayTypeStyle">
            <property name="javaStyle" value="true"/>
        </module>
        <module name="ArrayTrailingComma">
            <property name="severity" value="ignore"/>
        </module>
        <module name="DeclarationOrder"/>
        <module name="DefaultComesLast"/>
        <module name="Regexp"> <!-- SUBSTITUIR POR RegexpSingleline: http://checkstyle.sourceforge.net/config_regexp.html#RegexpSingleline -->
            <property name="format" value="[ \t]+$"/>
            <property name="illegalPattern" value="true"/>
            <property name="ignoreComments" value="true"/>
            <property name="message" value="Line has trailing spaces."/>
        </module>
        <module name="RegexpSinglelineJava">
            <property name="format" value="(System\.(out)|(err)\.print(ln)?\()|(.+\.printStackTrace\()"/>
            <property name="ignoreComments" value="true"/>
            <property name="message"
                      value="Don't use System.((out)|(err)).print(ln)(...) or ex.printStackTrace(), prefer logger.(debug|info|warn|error|...)"/>
        </module>
        <module name="TodoComment">
            <property name="severity" value="info"/>
            <property name="format" value="TODO"/>
        </module>
        <!--module name="TrailingComment"/--> <!-- Steve McConnel in "Code Complete" suggests that endline comments are a bad practice. -->
        <module name="UpperEll"/>
        <!--  Java Language specification -->
        <module name="MethodParamPad"/>
        <module name="OuterTypeFilename"/>
        <module name="OuterTypeNumber">
            <property name="max" value="1"/>
            <!-- Default value="1" -->
        </module>
        <module name="PackageAnnotation"/>
        <!--  Java Language specification - JLS 3rd ed. -->
        <module name="PackageDeclaration"/>
        <!--module name="RequireThis"/--> <!--  Pode ser muito oneroso mesmo udando: <property name="checkMethods" value="false"/> -->

        <!-- IMPORTANTE -->
        <module name="EqualsAvoidNull"/>
        <module name="NoClone"/>
        <module name="SuperClone"/>
        <!-- Para o caso de SupressWarning de NoClone -->
        <module name="NoFinalizer"/>
        <module name="SuperFinalize"/>
        <!-- Para o caso de SupressWarning de NoFinalizer -->
        <!-- Fim - IMPORTANTE -->

        <!-- ESTUDAR MAIS --><!--
        <module name="IllegalType">
            <property name="ignoredMethodNames" value="getInstance"/>
        </module>
        <module name="ExecutableStatementCount">
            <property name="tokens" value="INSTANCE_INIT,STATIC_INIT,METHOD_DEF,CTOR_DEF"/>
        </module>
        <module name="Indentation">
            <property name="severity" value="ignore"/>
        </module>
        <module name="Translation"/>
        --><!-- Fim - ESTUDAR MAIS -->
    </module>

</module>